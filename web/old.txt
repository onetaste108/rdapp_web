/* eslint-disable */

// Аккуратно, нельзя удалять код в строках 216, 250, это реакция на поворот устройства
// Работает только на localhost или по https

// Тактовый генератор (requestAnimationFrame или setTimeout) не нужен, он находится в вызывающем коде,
// поэтому обязателен возврат рендер функции (в самом конце)

// run_raduga_shader - обязательное название метода

var vs = `
attribute vec2 a_pos;
varying vec2 v_pos;
void main() {
  v_pos = a_pos;
  gl_Position = vec4(a_pos,0.0,1.0);
}`;

var fs = `
precision mediump float;

varying vec2 v_pos;

uniform float u_time; // Время, в любом формате
uniform int u_mode; // Режим: 0 - компьютер (мышка), 1 - телефон (гироскоп)
uniform mat3 u_gyro; // Матрица ориентации телефона
uniform vec2 u_mouse; // Положение мышки, можно сглаженное, нормализованное
uniform vec2 u_res; // разрешение канваса
uniform sampler2D u_tex0; // Текстуры
uniform sampler2D u_tex1;
uniform sampler2D u_tex2;

const float PI = 3.1415926535897932384626433832795;

vec4 quat_from_axis_angle(vec3 axis, float angle)
{
  vec4 qr;
  float half_angle = (angle * 0.5) * 3.14159 / 180.0;
  qr.x = axis.x * sin(half_angle);
  qr.y = axis.y * sin(half_angle);
  qr.z = axis.z * sin(half_angle);
  qr.w = cos(half_angle);
  return qr;
}

vec3 rot(vec3 p, vec3 a)
{
  vec3 axis = normalize(a);
  float angle = length(a);
  vec4 q = quat_from_axis_angle(axis, angle);
  vec3 v = p.xyz;
  v = v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
  return p-v;
}

vec3 project(vec3 p) {
  vec3 np = normalize(p);
  float phi = atan(np.x/np.z) / PI + 0.5;
  if (np.z < 0.0) phi = 1.0 - phi;
  float th = -asin(np.y) / PI + 0.5;
  return texture2D(u_tex0, vec2(phi,th)+u_mouse*100.0).rgb;
}

vec2 ptouv(vec2 p) {
  vec2 uv = p/2.0 + 0.5;
  uv.y = 1.0 - uv.y;
  return uv;
}


void main() {
  vec2 uv = ptouv(v_pos);
  vec3 color;
  vec3 r;
  for (int x = 0; x < 2; x++) {
    for (int y = 0; y < 2; y++) {
      r = texture2D(u_tex1, uv+vec2(float(x),float(y))/vec2(1920.0*2.0, 1080.0*2.0)).rgb;
      r = r * 2.0 - 1.0;
      color += project(r);
    }
  }

  color /= 2.0*2.0;

  gl_FragColor = vec4(color,1.0);
}`;

// Название этого метода менять нельзя
// canvasEl - уже готовый DOM элемент, а не селектор, искать его не надо, можно использовать как есть
run_raduga_shader = function(canvasEl) {
  // GLOBALS

  var IS_BLUR = false;
  var IS_UI = false;

  var IS_VIDEO;
  var SOURCE;
  var IMAGE_SOURCE;
  var VIDEO_SOURCE;
  var INPUT;

  // LOAD FILES

  function check_image(fname) {
    var ext = fname.split('.').pop();
    switch (ext.toLowerCase()) {
      case "jpg":
      case "jpeg":
      case "png":
      return true;
    }
    return false;
  }

  function check_video(fname) {
    var ext = fname.split('.').pop();
    switch (ext.toLowerCase()) {
      case "mov":
      case "mp4":
      case "avi":
      return true;
    }
    return false;
  }

  function load_image(gl, tex, url) {
    IMAGE_SOURCE.crossOrigin = "Anonymous";
    IMAGE_SOURCE.src = url;
    IMAGE_SOURCE.onload = () => {
      VIDEO_SOURCE.pause();
      VIDEO_SOURCE.removeAttribute('src');
      VIDEO_SOURCE.load();
      IS_VIDEO = false;
      twgl.setTextureFromElement(gl, tex, IMAGE_SOURCE);
      SOURCE = IMAGE_SOURCE;
    };
  }

  function load_video(url) {
    VIDEO_SOURCE.crossOrigin = "Anonymous";
    VIDEO_SOURCE.src = url;
    VIDEO_SOURCE.play();
  }

  function load_texture(gl, tex, url) {
    if (check_image(url)) load_image(gl, tex, url);
    if (check_video(url)) load_video(url);
  }

  function source_size() {
    if (IS_VIDEO) return [VIDEO_SOURCE.videoWidth, VIDEO_SOURCE.videoHeight];
    return [IMAGE_SOURCE.width, IMAGE_SOURCE.height];
  }

  function init_loader() {
    IMAGE_SOURCE = new Image();
    VIDEO_SOURCE = document.createElement("video");
    VIDEO_SOURCE.muted = true
    VIDEO_SOURCE.loop = true
    VIDEO_SOURCE.setAttribute('loop', true)
    VIDEO_SOURCE.setAttribute('muted', true)
    VIDEO_SOURCE.setAttribute('playsinline', true)
    VIDEO_SOURCE.setAttribute('autoplay', true)
    VIDEO_SOURCE.addEventListener("playing", ()=>{
      IS_VIDEO = true;
      SOURCE = VIDEO_SOURCE;
    }, true);
  }

  // Init input

  function init_input(canvas) {
    INPUT = {
      mouseX: 0,
      mouseY: 0,
      pmouseX: 0,
      pmouseY: 0,
      dmouseX: 0,
      dmouseY: 0,
      zoom: 0,

      w: false,
      s: false,
      a: false,
      d: false
    }

    // var mouseDown = function(e) {
    //   INPUT.drag = true;
    //   INPUT.pmouseX = e.clientX;
    //   INPUT.pmouseY = e.clientY;
    //   INPUT.mouseX = e.clientX;
    //   INPUT.mouseY = e.clientY;
    //   INPUT.mouseX = e.clientX;
    //   INPUT.mouseY = e.clientY;
    //   INPUT.dmouseX = 0;
    //   INPUT.dmouseY = 0;
    //   e.preventDefault();
    //   return false;
    // };

    // var mouseUp = function(e) {
    //   INPUT.drag = false;
    //   INPUT.dmouseX = 0;
    //   INPUT.dmouseY = 0;
    // };

    var mouseMove = function(e) {
      // if (!INPUT.drag) return false;
      INPUT.mouseX = e.clientX;
      INPUT.mouseY = e.clientY;
    };

    // ВНИМАНИЕ!!!!!!
    // Здесь прикручена реакция шейдера на поворот устройства
    var orientationEvtHandler = function(e) {
      INPUT.mouseX = Math.abs(event.alpha + event.beta - event.gamma) * 5
      INPUT.mouseY = Math.abs(event.gamma + event.beta - event.alpha) * 5
    };

    update_input = function() {
      INPUT.dmouseX = INPUT.mouseX - INPUT.pmouseX;
      INPUT.dmouseY = INPUT.mouseY - INPUT.pmouseY;
      INPUT.pmouseX = INPUT.mouseX;
      INPUT.pmouseY = INPUT.mouseY;
    }

    // var key_down = (e) => {
    //   if (e.code == "KeyW") INPUT.w = true;
    //   if (e.code == "KeyA") INPUT.a = true;
    //   if (e.code == "KeyS") INPUT.s = true;
    //   if (e.code == "KeyD") INPUT.d = true;
    // }

    // var key_up = (e) => {
    //   if (e.code == "KeyW") INPUT.w = false;
    //   if (e.code == "KeyA") INPUT.a = false;
    //   if (e.code == "KeyS") INPUT.s = false;
    //   if (e.code == "KeyD") INPUT.d = false;
    // }

    // document.addEventListener("keydown", key_down, false);
    // document.addEventListener("keyup", key_up, false);

    // window.addEventListener("mousedown", mouseDown, false);
    // window.addEventListener("mouseup", mouseUp, false);
    // window.addEventListener("mouseout", mouseUp, false);
    window.addEventListener("mousemove", mouseMove, false);
    // window.addEventListener("wheel", event => INPUT.zoom+=(event.deltaY/Math.abs(event.deltaY)));
    window.addEventListener('deviceorientation', orientationEvtHandler)

    return [INPUT, update_input];
  }

  // Setup GL

  function setup_gl(canvas) {
    var gl = canvas.getContext("webgl");
    var arrays = {
      a_pos: {
        numComponents: 2,
        data: [-1,-1,  -1, 1,   1,-1,  -1, 1,  1,-1,   1, 1]
      },
      a_texCoord: {
        numComponents: 2,
        data: [0,0, 0,1, 1,0, 0,1, 1,0, 1,1]
      }
    }
    var programInfo = twgl.createProgramInfo(gl, [vs, fs]);
    var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
    twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo);
    var blurProgramInfo = undefined;
    var blurBufferInfo = undefined;
    if (IS_BLUR) {
      blurProgramInfo = twgl.createProgramInfo(gl, [vs, fs_blur]);
      blurBufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
      twgl.setBuffersAndAttributes(gl, blurProgramInfo, blurBufferInfo);
    }
    return [gl, programInfo, bufferInfo, blurProgramInfo, blurBufferInfo];
  }

  function create_textures(gl, filter_s, main_s) {
    var tex_main = twgl.createTexture(gl, {width: main_s.w, height: main_s.h});
    var tex_depth = twgl.createTexture(gl, {width: main_s.w, height: main_s.h});
    var tex_norm = twgl.createTexture(gl, {width: main_s.w, height: main_s.h});
    var tex_filter = undefined;
    var fbo_filter = undefined;
    if (IS_BLUR) {
      tex_filter = [];
      fbo_filter = [];
      for (var i = 0; i < 2; i++) {
        tex_filter.push( twgl.createTexture(gl, {width: filter_s.w, height: filter_s.h}) );
        fbo_filter.push( createFramebufferInfo(gl, [{attachment: tex_filter[i]}],  filter_s.w,  filter_s.h) );
      }
    }
    return [tex_main, tex_depth, tex_norm, tex_filter, fbo_filter];
  }

  function blur(n, gl, tex_main, tex_filter, fbo_filter, blurBufferInfo, blurProgramInfo, size_main, size_fbo) {
    if (i == 0) return tex_main;
    var fbo_index = 0;
    gl.useProgram(blurProgramInfo.program);
    var u = {
      u_tex: tex_main,
      u_texres: size_main,
      u_res: size_fbo,
      u_mode: fbo_index
    }
    for (var i = 0; i < n; i++) {
      var fbo_index_next = (fbo_index+1)%2;
      bindFramebufferInfo(gl, fbo_filter[fbo_index_next]);
      twgl.setUniforms(blurProgramInfo, u);
      twgl.drawBufferInfo(gl, blurBufferInfo);
      u.u_texres = size_fbo;
      u.u_tex = tex_filter[fbo_index_next];
      u.u_mode = i%2;
      fbo_index = fbo_index_next;
    }
    bindFramebufferInfo(gl);
    return u.u_tex;
  }

  // RUN

  var canvas = canvasEl;
  var [gl, programInfo, bufferInfo, blurProgramInfo, blurBufferInfo] = setup_gl(canvas);
  var [tex_main, tex_depth, tex_norm, tex_filter, fbo_filter] = create_textures(gl, {w:1024,h:1024}, {w:1024,h:1024});

  const storageUrl = 'http://radugadesign.okkapi.agency/upload/shader/';

  const images = [
    "1.jpg",
    "1.png",
    "2.jpg",
    "3.jpg",
    "4.jpg",
    "5.jpg",
    "img01.png",
    "img04.png",
    "img05.png",
    "img07.png",
    // "showreel_1024.mp4"
  ]
  var random_image = storageUrl + images[Math.floor(Math.random() * images.length)];
  const norms = [
    "ns/n (1).png",
    "ns/n (2).png",
    "ns/n (3).png",
    "ns/n (4).png",
    "ns/n (5).png",
    "ns/n (6).png",
    "ns/n (7).png",
    "ns/n (8).png",
    "ns/n (9).png",
    "ns/n (10).png",
    "ns/n (11).png",
    "ns/n (12).png",
    "ns/n (13).png",
    "ns/n (14).png",
    "ns/n (15).png",
    "ns/n (16).png",
    "ns/n (17).png"
  ]
  var random_n = storageUrl + norms[Math.floor(Math.random() * norms.length)];

  init_loader();
  // init_drop(gl, tex_main, canvas);
  load_texture(gl, tex_main, random_image);
  // load_texture(gl, tex_main, "img/showreel_1024.mp4");
  const DEPTH_SOURCE = new Image();
  DEPTH_SOURCE.crossOrigin = "Anonymous";
  DEPTH_SOURCE.src = storageUrl + "01db.png";
  DEPTH_SOURCE.onload = () => {
    twgl.setTextureFromElement(gl, tex_depth, DEPTH_SOURCE);
  };

  const NORM_SOURCE = new Image();
  NORM_SOURCE.crossOrigin = "Anonymous";
  NORM_SOURCE.src = storageUrl + "normal.png";
  NORM_SOURCE.onload = () => {
    twgl.setTextureFromElement(gl, tex_norm, NORM_SOURCE);
  };

  var [INPUT, update_input] = init_input(canvas);
  // var sl_blur = add_slider("Blur", 0, 10, 0);
  // var sl_distort = add_slider("Distort", 0, 1, 0);
  // var sl_bump = add_slider("Bump", 0, 1, 0);
  // var sl_step_scale = add_slider("Step Scale", 0, 1, 1);
  // var sl_grad_scale = add_slider("Gradient Scale", 0, 0.01, 0.1);

  var camera = twgl.m4.identity();

  var uniforms = {};
  uniforms.u_eye = [0.0,0.0,0.0];
  var time = 0;

  let px = 0;
  let py = 0;
  let vx = 0;
  let vy = 0;

  canvas.width = Math.max(canvas.clientWidth, 1920);
  canvas.height = Math.max(canvas.clientHeight, 1080);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

  function render() {
    update_input();
    let mstep = 0.005;
    let dx = INPUT.dmouseX;
    let dy = INPUT.dmouseY;
    // console.log(dx);
    let npx = INPUT.mouseX*mstep;
    let npy = INPUT.mouseY*mstep;
    // npx += gb*0.02;
    // npy += gg*0.02;
    vx = (npx-px)*0.1;
    vy = (npy-py)*0.1;
    px += vx;
    py += vy;

    const rot_len = Math.sqrt(vx*vx+vy*vy)
    if (rot_len > 0){
      twgl.m4.axisRotate(camera, [-vy/rot_len,vx/rot_len,0], rot_len, camera);
    }
    // twgl.m4.axisRotate(camera, [1,0,0], gx*mstep, camera);


    time += 1/60;
    if (IS_VIDEO) twgl.setTextureFromElement(gl, tex_main, VIDEO_SOURCE);

    // BLUR
    var blur_tex = tex_main;
    if (IS_BLUR) {
      blur_tex = blur(sl_blur.value, gl, tex_main, tex_filter, fbo_filter, blurBufferInfo, blurProgramInfo, source_size(), [1024,1024]);
    }
    // twgl.drawBufferInfo(gl, blurBufferInfo);


    // DRAW
    uniforms.u_time = time;
    // uniforms.u_cam = camera;
    // if (INPUT.drag) uniforms.u_eye[0] += INPUT.dmouseX*0.005;
    // if (INPUT.drag) uniforms.u_eye[1] += INPUT.dmouseY*0.005;
    // uniforms.u_eye[2] = INPUT.zoom;
    //
    uniforms.u_tex0 = tex_main;
    uniforms.u_tex1 = tex_norm;
    // uniforms.u_tex_norm = tex_norm;
    // uniforms.u_mouse = [INPUT.mouseX/canvas.width, INPUT.mouseY/canvas.height];
    uniforms.u_mouse = [px/canvas.width, py/canvas.height];
    // console.log([INPUT.mouseX, INPUT.mouseY]);
    // uniforms.u_blur_tex = blur_tex;
    // uniforms.u_blur_tex = blur_tex;
    // uniforms.u_distort = sl_distort.value;
    // uniforms.u_distort = sl_distort.value;
    // uniforms.u_bump = sl_bump.value;
    uniforms.u_res = [canvas.width, canvas.height];
    // uniforms.u_STEP_SCALE = sl_step_scale.value;
    // uniforms.u_bgrad = sl_grad_scale.value;
    //
    // uniforms.u_scale = 1;
    // uniforms.u_fov = 1;
    // uniforms.u_lpos = 5;
    // uniforms.u_rad_in = 1;
    // uniforms.u_rad_mid = 3;
    // uniforms.u_rad_out = 4;
    // uniforms.u_phong = 0;
    // uniforms.u_MIN_DIST = 0;
    // uniforms.u_MAX_DIST = 100;
    // uniforms.u_noise_speed = 0.5;
    // uniforms.u_lookrot = 0;


    gl.useProgram(programInfo.program);
    twgl.setUniforms(programInfo, uniforms);
    twgl.drawBufferInfo(gl, bufferInfo);
  }

  // ВНИМАНИЕ!!!!
  // Обязателен возврат рендер функции, тактовый генератор анимации находится в вызывающем коде
  return render
}

/* eslint-enable */
